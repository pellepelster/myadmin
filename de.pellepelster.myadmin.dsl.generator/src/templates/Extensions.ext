import myAdminDsl;
extension org::eclipse::xtend::util::stdlib::naming;

String modelResourceBlacklist() : GLOBALVAR modelResourceBlacklist;

String setModelScope(ModelScope modelScope):
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.setModelScope(de.pellepelster.myadmin.dsl.myAdminDsl.ModelScope);

String setModelResourceBlacklist(String modelResourceBlacklist):
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.setModelResourceBlacklist(java.lang.String);
	
String getPackageName(Object object) :
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.getPackageName(org.eclipse.emf.ecore.EObject);

String getPackageName(Object object, ModelScope modelScope) :
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.getPackageName(org.eclipse.emf.ecore.EObject, de.pellepelster.myadmin.dsl.myAdminDsl.ModelScope);

String entityName(Object object) :
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.entityName(org.eclipse.emf.ecore.EObject);

String simpleVOName(Object object) :
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.entityName(org.eclipse.emf.ecore.EObject);

String fullQualifiedEntityName(Object object) :
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.fullQualifiedEntityName(org.eclipse.emf.ecore.EObject);

String fullQualifiedSimpleVOName(Object object) :
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.fullQualifiedEntityName(org.eclipse.emf.ecore.EObject);

String fullQualifiedEntityName(Object object, ModelScope modelScope) :
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.fullQualifiedEntityName(org.eclipse.emf.ecore.EObject, de.pellepelster.myadmin.dsl.myAdminDsl.ModelScope);

Model getRootModel(Object object) :
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.getRootModel(org.eclipse.emf.ecore.EObject);

String camelCaseToUnderScore(String camelCase) :
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.camelCaseToUnderScore(java.lang.String);

String getRootWebServicePackageName(Model model) :
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.getRootWebServicePackageName(de.pellepelster.myadmin.dsl.myAdminDsl.Model);

String getRootWebPackageName(Model model) :
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.getRootWebPackageName(de.pellepelster.myadmin.dsl.myAdminDsl.Model);

String getServiceImplementationPackageName(RemoteService remoteService) :
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.getServiceImplementationPackageName(de.pellepelster.myadmin.dsl.myAdminDsl.RemoteService);

PackageDeclaration getSingleRootPackage(Model model) :
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.getSingleRootPackage(de.pellepelster.myadmin.dsl.myAdminDsl.Model);

List[Entity] getReferencedEntitiesWithoutDuplicates(Entity entity) :
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.getReferencedEntitiesWithoutDuplicates(de.pellepelster.myadmin.dsl.myAdminDsl.Entity);

List[Object] allElements(Object eObject) :
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.allElements(org.eclipse.emf.ecore.EObject);
	
String getControlName(DictionaryControl dictionaryControl) :
	JAVA de.pellepelster.myadmin.dsl.util.ModelUtil.getControlName(de.pellepelster.myadmin.dsl.myAdminDsl.DictionaryControl);

EntityAttribute getEntityAttribute(DictionaryControl dictionaryControl) :
	JAVA de.pellepelster.myadmin.dsl.util.ModelUtil.getEntityAttribute(de.pellepelster.myadmin.dsl.myAdminDsl.DictionaryControl);

//- xsd -----------------------------------------------------------------------
String xsdFileName(Entity entity): entity.name.toLowerCase() + ".xsd";
String xsdQualifier(Entity entity): entity.name.toLowerCase();
String xsdCatalogFileName(Model model): model.name.toLowerCase() + ".cat";
String xsdNamespaceUrl(Model model): if (model.schemaUrl != null) then model.schemaUrl else "http://" + model.name.toLowerCase();
String xsdNamespace(Entity entity): xsdNamespaceUrl(getRootModel(entity)) + "/" + entity.name.toLowerCase();
String xsdSchemaLocation(Entity entity): xsdFileName(entity); 
String xsdTypeName(Entity entity): entity.name.toFirstUpper() + "Type"; 
String xsdTypeReferenceName(Entity entity): entity.name.toFirstUpper() + "ReferenceType"; 
String xsdElementName(Entity entity): entity.name.toFirstUpper(); 
String xsdElementListName(Entity entity): xsdElementName(entity) + "List"; 
String xsdElementReferenceName(Entity entity): entity.name.toFirstUpper() + "Reference";
String xsdElementReferenceWrapperName(EntityAttribute attribute): attribute.name.toFirstUpper() + "ReferenceWrapper";
 
String xsdElementReferenceWrapperName(Entity entity): entity.name.toFirstUpper() + "Reference";
String xsdElementReferenceListWrapperName(Entity entity): entity.name.toFirstUpper() + "ReferenceList";

//- base module utils ---------------------------------------------------------
String baseModuleName(ModuleDefinition moduleDefinition) : "Base" + moduleDefinition.name.toFirstUpper() + "Module";
String fullQualifiedModuleDefinitionPackageName(ModuleDefinition moduleDefinition) : getPackageName(moduleDefinition);
String fullQualifiedBaseModuleName(ModuleDefinition moduleDefinition) : fullQualifiedModuleDefinitionPackageName(moduleDefinition) + '.' + baseModuleName(moduleDefinition);
String fullQualifiedBaseModuleFileName(ModuleDefinition moduleDefinition) : fullQualifiedBaseModuleName(moduleDefinition).replaceAll('\\.', '/') + ".java";

//- GWT servicelocator utils --------------------------------------------------
String gwtRemoteServiceLocatorName(Model model): model.name.toFirstUpper() + "GWTRemoteServiceLocator";
String gwtRemoteServiceLocatorInterfaceName(Model model): "I" + gwtRemoteServiceLocatorName(model);
String fullQualifiedGWTRemoteServiceLocatorPackage(Model model) : getRootWebServicePackageName(model);
String fullQualifiedGWTRemoteServiceLocatorFileName(Model model): fullQualifiedGWTRemoteServiceLocatorPackage(model).replaceAll('\\.', '/') + "/" + gwtRemoteServiceLocatorName(model) + ".java";
String fullQualifiedGWTRemoteServiceLocatorInterfaceFileName(Model model): fullQualifiedGWTRemoteServiceLocatorPackage(model).replaceAll('\\.', '/') + "/" + gwtRemoteServiceLocatorInterfaceName(model) + ".java";

//- servicelocator utils ------------------------------------------------------
String remoteServiceLocatorName(Model model): model.name.toFirstUpper() + "RemoteServiceLocator";
String serviceLocatorName(Model model): model.name.toFirstUpper() + "ServiceLocator";
String asyncServiceLocatorName(Model model): model.name.toFirstUpper() + "AsyncServiceLocator";
String fullQualifiedServiceLocatorPackage(Model model) : getRootWebServicePackageName(model);
String fullQualifiedRemoteServiceLocatorFileName(Model model): fullQualifiedServiceLocatorPackage(model).replaceAll('\\.', '/') + "/" + remoteServiceLocatorName(model) + ".java";
String fullQualifiedServiceLocatorName(Model model): fullQualifiedServiceLocatorPackage(model) + "." + serviceLocatorName(model);
String fullQualifiedAsyncServiceLocatorName(Model model): fullQualifiedServiceLocatorPackage(model) + "." + asyncServiceLocatorName(model);
String fullQualifiedServiceLocatorFileName(Model model): fullQualifiedServiceLocatorName(model).replaceAll('\\.', '/') + ".java";
String fullQualifiedAsyncServiceLocatorFileName(Model model): fullQualifiedAsyncServiceLocatorName(model).replaceAll('\\.', '/') + ".java";

//- entity vo mapper ----------------------------------------------------------
String fullQualifiedEntityVOMapperFileName(Model model) : fullQualifiedEntityVOMapperName(model).replaceAll('\\.', '/') + '.java';
String fullQualifiedEntityVOMapperName(Model model) : getRootWebServicePackageName(model) + '.' + entityVOMapperName(model);
String entityVOMapperName(Model model) : model.name.toFirstUpper() + 'EntityVOMapper';

//- service extensions --------------------------------------------------------
String fullQualifiedServicePackage(RemoteService remoteService, ModelScope modelScope) : getPackageName(remoteService, modelScope);
String fullQualifiedServicePackage(RemoteService remoteService) : getPackageName(remoteService);
String serviceName(RemoteService remoteService) : remoteService.name.toFirstUpper();
boolean isNonPublic(RemoteService remoteService): remoteService.remoteServiceOptions != null && remoteService.remoteServiceOptions.nonpublic;

//==================//
// dictionary model //
//==================//

String dictionaryConstantName(String name) : camelCaseToUnderScore(name).toUpperCase();

String dictionaryRootPackageName(Object dictionaryElement) : getRootWebPackageName(getRootModel(dictionaryElement)) + ".dictionaries";
String dictionaryPackageName(Object dictionaryElement) : "not_supported";
String dictionaryClassName(Object dictionaryElement) : "not_supported";
String fullQualifiedDictionaryClassName(Object dictionaryElement) : "not_supported";

//-------//
// model //
//-------//
String dictionaryClassName(Model model) : model.name.toFirstUpper() + "DictionaryModel";
String dictionaryPackageName(Model model) : dictionaryRootPackageName(model);
String fullQualifiedDictionaryClassName(Model model) : dictionaryPackageName(model) + '.' + dictionaryClassName(model);
String fullQualifiedDictionaryFileName(Model model) : fullQualifiedDictionaryClassName(model).replaceAll('\\.', '/') + '.java';

//------------//
// dictionary //
//------------//
String dictionaryClassName(Dictionary dictionary) : dictionary.name.toFirstUpper();
String dictionaryPackageName(Dictionary dictionary) : dictionaryRootPackageName(dictionary) + '.' + dictionaryClassName(dictionary).toLowerCase();
String fullQualifiedDictionaryClassName(Dictionary dictionary) : dictionaryPackageName(dictionary) + '.' + dictionaryClassName(dictionary);
String fullQualifiedDictionaryFileName(Dictionary dictionary) : fullQualifiedDictionaryClassName(dictionary).replaceAll('\\.', '/') + '.java';

//--------------------//
// dictionary control //
//--------------------//
String dictionaryClassName(DictionaryControl dictionaryControl) : getControlName(dictionaryControl).toFirstUpper();
String dictionaryPackageName(DictionaryControl containerControl) : dictionaryPackageName(containerControl.eContainer);
String fullQualifiedDictionaryClassName(DictionaryControl dictionaryControl) : dictionaryPackageName(dictionaryControl) + '.' + dictionaryClassName(dictionaryControl);
String fullQualifiedDictionaryFileName(DictionaryControl dictionaryControl) : fullQualifiedDictionaryClassName(dictionaryControl).replaceAll('\\.', '/') + '.java';

//-------------------//
// dictionary editor //
//-------------------//
String dictionaryClassName(DictionaryEditor dictionaryEditor) : dictionaryEditor.name;
String dictionaryPackageName(DictionaryEditor dictionaryEditor) : dictionaryPackageName(dictionaryEditor.eContainer);
String fullQualifiedDictionaryClassName(DictionaryEditor dictionaryEditor) : dictionaryPackageName(dictionaryEditor) + '.' + dictionaryClassName(dictionaryEditor);
String fullQualifiedDictionaryFileName(DictionaryEditor dictionaryEditor) : fullQualifiedDictionaryClassName(dictionaryEditor).replaceAll('\\.', '/') + '.java';

//-------------------//
// dictionary search //
//-------------------//
String dictionaryClassName(DictionarySearch dictionarySearch) : dictionarySearch.name;
String dictionaryPackageName(DictionarySearch dictionarySearch) : dictionaryPackageName(dictionarySearch.eContainer);
String fullQualifiedDictionaryClassName(DictionarySearch dictionarySearch) : dictionaryPackageName(dictionarySearch.eContainer) + '.' + dictionaryClassName(dictionarySearch);
String fullQualifiedDictionaryFileName(DictionarySearch dictionarySearch) : fullQualifiedDictionaryClassName(dictionarySearch).replaceAll('\\.', '/') + '.java';

//-------------------//
// dictionary filter //
//-------------------//
String dictionaryClassName(DictionaryFilter dictionaryFilter) : dictionaryFilter.name;
String dictionaryPackageName(DictionaryFilter dictionaryFilter) : dictionaryPackageName(dictionaryFilter.eContainer) + '.' + dictionaryClassName(dictionaryFilter).toLowerCase();
String fullQualifiedDictionaryClassName(DictionaryFilter dictionaryFilter) : dictionaryPackageName(dictionaryFilter) + '.' + dictionaryClassName(dictionaryFilter);
String fullQualifiedDictionaryFileName(DictionaryFilter dictionaryFilter) : fullQualifiedDictionaryClassName(dictionaryFilter).replaceAll('\\.', '/') + '.java';

//----------------------//
// dictionary composite //
//----------------------//
String dictionaryClassName(DictionaryContainer dictionaryContainer) : dictionaryContainer.name;
String dictionaryPackageName(DictionaryContainer dictionaryContainer) : dictionaryPackageName(dictionaryContainer.eContainer) + '.' + dictionaryClassName(dictionaryContainer).toLowerCase();
String fullQualifiedDictionaryClassName(DictionaryComposite dictionaryComposite) : dictionaryPackageName(dictionaryComposite) + '.' + dictionaryClassName(dictionaryComposite);
String fullQualifiedDictionaryFileName(DictionaryComposite dictionaryComposite) : fullQualifiedDictionaryClassName(dictionaryComposite).replaceAll('\\.', '/') + '.java';

//---------------------------//
// dictionary editable table //
//---------------------------//
String dictionaryClassName(DictionaryEditableTable dictionaryEditableTable) : dictionaryEditableTable.name;
String dictionaryPackageName(DictionaryEditableTable dictionaryEditableTable) : dictionaryPackageName(dictionaryEditableTable.eContainer) + '.' + dictionaryClassName(dictionaryEditableTable).toLowerCase();
String fullQualifiedDictionaryClassName(DictionaryEditableTable dictionaryEditableTable) : dictionaryPackageName(dictionaryEditableTable) + '.' + dictionaryClassName(dictionaryEditableTable);
String fullQualifiedDictionaryFileName(DictionaryEditableTable dictionaryEditableTable) : fullQualifiedDictionaryClassName(dictionaryEditableTable).replaceAll('\\.', '/') + '.java';

//-----------------------------//
// dictionary assignment table //
//------------------------..---//
String dictionaryClassName(DictionaryAssignmentTable dictionaryAssignmentTable) : dictionaryAssignmentTable.name;
String dictionaryPackageName(DictionaryAssignmentTable dictionaryAssignmentTable) : dictionaryPackageName(dictionaryAssignmentTable.eContainer) + '.' + dictionaryClassName(dictionaryAssignmentTable).toLowerCase();
String fullQualifiedDictionaryClassName(DictionaryAssignmentTable dictionaryAssignmentTable) : dictionaryPackageName(dictionaryAssignmentTable) + '.' + dictionaryClassName(dictionaryAssignmentTable);
String fullQualifiedDictionaryFileName(DictionaryAssignmentTable dictionaryAssignmentTable) : fullQualifiedDictionaryClassName(dictionaryAssignmentTable).replaceAll('\\.', '/') + '.java';

//- dictionary debug ids ------------------------------------------------------------
String fullQualifiedPackageName(Dictionary dictionary) : getPackageName(dictionary);
String dictionaryDebugIDsInterfaceName(Dictionary dictionary) : dictionary.name.toFirstUpper() + "DictionaryDebugIDs";
String fullQualifiedDictionaryDebugIDsInterfaceName(Dictionary dictionary) : fullQualifiedPackageName(dictionary) + '.' + dictionaryDebugIDsInterfaceName(dictionary);
String fullQualifiedDictionaryDebugIDsInterfaceFileName(Dictionary dictionary) : fullQualifiedDictionaryDebugIDsInterfaceName(dictionary).replaceAll('\\.', '/') + '.java';

//- hook registrations --------------------------------------------------------
String hookRegistrationClassName(Dictionary dictionary) : dictionary.name.toFirstUpper() + "HookRegistration";
String fullQualifiedHookRegistrationClassName(Dictionary dictionary) : fullQualifiedPackageName(dictionary) + '.' + hookRegistrationClassName(dictionary);
String fullQualifiedHookRegistrationClassFileName(Dictionary dictionary) : fullQualifiedHookRegistrationClassName(dictionary).replaceAll('\\.', '/') + '.java';

String gwtAsyncAdapterName(RemoteService remoteService) : serviceName(remoteService) + "AsyncAdapter";
String fullQualifiedGWTAsyncAdapterName(RemoteService remoteService, ModelScope modelScope) : fullQualifiedServicePackage(remoteService, modelScope) + "." + gwtAsyncAdapterName(remoteService);
String fullQualifiedGWTAsyncAdapterName(RemoteService remoteService) : fullQualifiedServicePackage(remoteService) + "." + gwtAsyncAdapterName(remoteService);
String fullQualifiedGWTAsyncAdapterFileName(RemoteService remoteService) : fullQualifiedGWTAsyncAdapterName(remoteService).replaceAll('\\.', '/') + '.java';

String interfaceName(RemoteService remoteService) : 'I' + serviceName(remoteService);
String interfaceNameGWT(RemoteService remoteService) : interfaceName(remoteService) + "GWT";
String interfaceNameGWTAsync(RemoteService remoteService) : interfaceNameGWT(remoteService) + "Async";
String implementationName(RemoteService remoteService) : remoteService.name.toFirstUpper() + 'Impl';

String fullQualifiedInterfaceName(RemoteService remoteService, ModelScope modelScope) : getPackageName(remoteService, modelScope) + '.' + interfaceName(remoteService);
String fullQualifiedInterfaceName(RemoteService remoteService) : fullQualifiedServicePackage(remoteService) + '.' + interfaceName(remoteService);

String fullQualifiedInterfaceNameGWT(RemoteService remoteService) : fullQualifiedServicePackage(remoteService) + '.' + interfaceNameGWT(remoteService);
String fullQualifiedInterfaceNameGWTAsync(RemoteService remoteService, ModelScope modelScope) : fullQualifiedServicePackage(remoteService, modelScope) + '.' + interfaceNameGWTAsync(remoteService);
String fullQualifiedInterfaceNameGWTAsync(RemoteService remoteService) : fullQualifiedServicePackage(remoteService) + '.' + interfaceNameGWTAsync(remoteService);
String fullQualifiedImplementationName(RemoteService remoteService) : getServiceImplementationPackageName(remoteService) + '.' + implementationName(remoteService);
String fullQualifiedInterfaceFileName(RemoteService remoteService) : fullQualifiedInterfaceName(remoteService).replaceAll('\\.', '/') + '.java';
String fullQualifiedInterfaceFileNameGWT(RemoteService remoteService) : fullQualifiedInterfaceNameGWT(remoteService).replaceAll('\\.', '/') + '.java';
String fullQualifiedInterfaceFileNameGWTAsync(RemoteService remoteService) : fullQualifiedInterfaceNameGWTAsync(remoteService).replaceAll('\\.', '/') + '.java';

//- rest services -------------------------------------------------------------
String restServiceUrl(RemoteService remoteService) : "/rest/" + remoteService.name.toLowerCase();
String restServiceUrl(RemoteService remoteService, RemoteMethod remoteMethod) : restServiceUrl(remoteService) + "/" + restServiceUrl(remoteMethod);
String restServiceUrl(RemoteMethod remoteMethod) : remoteMethod.name.toLowerCase();

String baseRestServiceControllerName(RemoteService remoteService) : remoteService.name.toFirstUpper() + "RestServiceController";
String fullyQualifiedBaseRestServiceControllerName(RemoteService remoteService) : getPackageName(remoteService) + "." + baseRestServiceControllerName(remoteService);
String fullyQualifiedBaseRestServiceControllerFileName(RemoteService remoteService) : fullyQualifiedBaseRestServiceControllerName(remoteService).replaceAll('\\.', '/') + '.java';

String mobileParameterWrapperName(RemoteService remoteService, RemoteMethod remoteMethod) : remoteService.name.toFirstUpper() + remoteMethod.name.toFirstUpper() + "MobileParameterWrapper";
String fullyQualifiedMobileParameterWrapperName(RemoteService remoteService, RemoteMethod remoteMethod, ModelScope modelScope) : getPackageName(remoteService, modelScope) + "." + mobileParameterWrapperName(remoteService, remoteMethod);
String fullyQualifiedMobileParameterWrapperFileName(RemoteService remoteService, RemoteMethod remoteMethod, ModelScope modelScope) : fullyQualifiedMobileParameterWrapperName(remoteService, remoteMethod, modelScope).replaceAll('\\.', '/') + '.java';

String mobileClientServiceImplName(RemoteService remoteService) : remoteService.name.toFirstUpper() + "MobileServiceImpl";
String fullQualifiedMobileClientServiceImplName(RemoteService remoteService) : getPackageName(remoteService) + "." + mobileClientServiceImplName(remoteService);
String fullQualifiedMobileClientServiceImplName(RemoteService remoteService, ModelScope modelScope) : getPackageName(remoteService, modelScope) + "." + mobileClientServiceImplName(remoteService);
String fullQualifiedMobileClientServiceImplFileName(RemoteService remoteService) : fullQualifiedMobileClientServiceImplName(remoteService).replaceAll('\\.', '/') + '.java';

//- entity naming utils -------------------------------------------------------
String fullQualifiedEntityFileName(Entity entity) : fullQualifiedEntityName(entity).replaceAll('\\.', '/') + '.java';
String fullQualifiedEntityXSDFileName(Entity entity) : fullQualifiedEntityName(entity).replaceAll('\\.', '/') + '.xsd';
String fullQualifiedEntityFileName(Enumeration enumeration) : fullQualifiedEntityName(enumeration).replaceAll('\\.', '/') + '.java';

String fullQualifiedEntityPackage(Entity entity) : getPackageName(entity);
String fullQualifiedEntityPackage(Enumeration enumeration) : getPackageName(enumeration);

//- simple vo naming utils ----------------------------------------------------
String fullQualifiedSimpleVOFileName(SimpleVO simpleVO) : fullQualifiedSimpleVOName(simpleVO).replaceAll('\\.', '/') + '.java';
String fullQualifiedSimpleVOPackage(SimpleVO simpleVO) : getPackageName(simpleVO);


//- jpa utils -----------------------------------------------------------------
String jpaId(Entity entity) : entity.name.toLowerCase();
String jpaIdName(Entity entity) : jpaId(entity) + '_id';
String jpaParentName(Entity entity) : jpaId(entity) + '_id_parent';
String jpaIdSequenceName(Entity entity) : jpaId(entity) + '_id_seq';
String jpaColumnName(Entity entity, EntityAttribute attribute) : entity.name.toLowerCase() + '_' + attribute.name.toLowerCase();
String jpaColumnName(EntityAttribute attribute) : attribute.name.toLowerCase();
String persistenceUnitName(Model model): model.name + 'PersistenceUnit';

//- entity references ---------------------------------------------------------
Entity getEntity(EntityReferenceType entityReferenceType) :
	if (EntityType.isAssignableFrom(entityReferenceType.metaType)) then
 	{
 		getEntity((EntityType) entityReferenceType)
 	}
 	else if (ReferenceDatatypeType.isAssignableFrom(entityReferenceType.metaType)) then
 	{
 		getEntity((ReferenceDatatypeType) entityReferenceType)
 	};

Entity getEntity(EntityType entityType) :
	entityType.type;

Entity getEntity(ReferenceDatatypeType referenceDatatypeType) :
	referenceDatatypeType.type.entity;

String backSelfReferenceName() :
	"parent";

String backReferenceName(Entity entity) :
	entity.name.toFirstLower();
	
//- utils ---------------------------------------------------------------------
boolean isTrue(Boolean b):
	b != null && b;
	
//- dictionary utils ----------------------------------------------------------
String datatypeName(Datatype datatype) : datatype.name + "Datatype";
String controlName(DictionaryControl control) : control.name + "Control";
	
String clientGeneratedModuleDefinitionFileName(Model model) : model.name.toFirstUpper() + "Generated.gwt.xml";	
String fullQualifiedClientGeneratedModuleDefinitionFileName(Model model) : getSingleRootPackage(model).name.replaceAll('\\.', '/') + "/" + clientGeneratedModuleDefinitionFileName(model);

String fieldDescriptorName(String name) : "FIELD_" + name.toUpperCase();


//- dictionary ids ------------------------------------------------------------	
String resolveControlName(DictionaryControl dictionaryControl) :
	JAVA de.pellepelster.myadmin.dsl.generator.Extensions.resolveControlName(de.pellepelster.myadmin.dsl.myAdminDsl.DictionaryControl);

String dictionaryIDInternal(DictionaryControl dictionaryControl) : dictionaryIDInternal(dictionaryControl.eContainer) + "-" + resolveControlName(dictionaryControl);

String dictionaryIDInternal(Dictionary dictionary): dictionary.name;

String dictionaryIDInternal(DictionaryEditor dictionaryEditor): dictionaryIDInternal(dictionaryEditor.eContainer) + "-" +  dictionaryEditor.name;

String dictionaryIDInternal(Object object) : "";

String dictionaryIDInternal(DictionaryComposite dictionaryComposite) : dictionaryIDInternal(dictionaryComposite.eContainer) + "-" + dictionaryComposite.name;

String dictionaryID(DictionaryControl dictionaryControl) : dictionaryIDInternal(dictionaryControl);
	
String dictionaryIDIdentifier(DictionaryControl dictionaryControl) : dictionaryID(dictionaryControl).toUpperCase().replaceAll("-", "_");
