«IMPORT myAdminDsl»
«EXTENSION templates::Extensions»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE moduleDefinitionParameters FOR ModuleDefinition-»
	«FOREACH this.moduleDefinitionParameters AS moduleDefinitionParameter SEPARATOR ", "-»
		«EXPAND templates::type::Type::webVOType FOR moduleDefinitionParameter.type» «moduleDefinitionParameter.name.toFirstLower()-»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE baseModuleClass FOR ModuleDefinition»

	«FILE fullQualifiedBaseModuleFileName()-»
	package «fullQualifiedModuleDefinitionPackageName()»;
	
	public abstract class «baseModuleName()» extends de.pellepelster.myadmin.client.base.module.BaseModule {
	
		public static final String MODULE_ID = "«name»";

		public Base«name.toFirstUpper()»Module(String moduleUrl, com.google.gwt.user.client.rpc.AsyncCallback<de.pellepelster.myadmin.client.base.module.IModule> moduleCallback, java.util.Map<String, Object> parameters) {
			super(moduleUrl, moduleCallback, parameters);
		}
	
		«FOREACH moduleDefinitionParameters AS moduleDefinitionParameter»
		
		public static final String «moduleDefinitionParameter.name.toUpperCase()»_PARAMETER_ID = "«moduleDefinitionParameter.name»";
		
		public «EXPAND templates::type::Type::webVOType FOR moduleDefinitionParameter.type» get«moduleDefinitionParameter.name.toFirstUpper()»() {

			if (getParameters().containsKey("«moduleDefinitionParameter.name»"))
			{
				Object parameterValue = parameters.get("«moduleDefinitionParameter.name»");
			
				if (parameterValue instanceof «EXPAND templates::type::Type::webVOType FOR moduleDefinitionParameter.type»)
				{
					return («EXPAND templates::type::Type::webVOType FOR moduleDefinitionParameter.type») parameterValue;
				}
				else
				{
					throw new RuntimeException("parameter value type mismatch, expected '«EXPAND templates::type::Type::webVOType FOR moduleDefinitionParameter.type»' but got '" + parameterValue.getClass().getName() + "'");
				}
			}
			else
			{
				return null;
			}
		}
		
		public boolean has«moduleDefinitionParameter.name.toFirstUpper()»() {
			return getParameters().containsKey("«moduleDefinitionParameter.name»");
		}

		«ENDFOREACH»	

		public static java.util.Map<String, Object> getParameterMap(«EXPAND moduleDefinitionParameters FOR this») {
		
			java.util.Map<String, Object> parameterMap = new java.util.HashMap<String, Object>();

			«FOREACH this.moduleDefinitionParameters AS moduleDefinitionParameter-»
				parameterMap.put(«moduleDefinitionParameter.name.toUpperCase()»_PARAMETER_ID, «moduleDefinitionParameter.name.toFirstLower()-»);
			«ENDFOREACH»
			
			return parameterMap;
		}

		public boolean hasParameter(String parameterName) {
			return getParameters().containsKey(parameterName);
		}

	}
	«ENDFILE»
«ENDDEFINE»