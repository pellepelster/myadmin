«IMPORT myAdminDsl»
«EXTENSION templates::NewExtensions»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE gwtRemoteServiceLocator FOR Model»
«FILE fullQualifiedGWTServiceLocatorFileName()-»

package «fullQualifiedGWTServiceLocatorPackage()»;

public class «GWTServiceLocatorName()» implements «GWTServiceLocatorInterfaceName()» {

    private static final «name»GWTRemoteServiceLocator instance =
        new «name»GWTRemoteServiceLocator();

    private «name»GWTRemoteServiceLocator() {
    }

    public static «name»GWTRemoteServiceLocator getInstance() {
        return instance;
    }

	«FOREACH eAllContents.typeSelect(RemoteService) AS remoteService»
		«IF !isNonPublic(remoteService)»
		 	public «fullQualifiedInterfaceNameGWTAsync(remoteService)» get«serviceName(remoteService)»() {
				final «fullQualifiedInterfaceNameGWTAsync(remoteService)» service = («fullQualifiedInterfaceNameGWTAsync(remoteService)») com.google.gwt.core.client.GWT.create(«fullQualifiedInterfaceNameGWT(remoteService)».class);
				com.google.gwt.user.client.rpc.ServiceDefTarget formEndpoint = (com.google.gwt.user.client.rpc.ServiceDefTarget) service;
				formEndpoint.setServiceEntryPoint(com.google.gwt.core.client.GWT.getModuleBaseURL()
						+ "../remote/rpc/«serviceName(remoteService)»");
				return service;
			}
		«ENDIF»
	«ENDFOREACH»
}
«ENDFILE»

«FILE fullQualifiedGWTServiceLocatorInterfaceFileName()-»

package «fullQualifiedGWTServiceLocatorPackage()»;

public interface «GWTServiceLocatorInterfaceName()» {
	«FOREACH eAllContents.typeSelect(RemoteService) AS remoteService»
		«IF !isNonPublic(remoteService)»
		 	public «fullQualifiedInterfaceNameGWTAsync(remoteService)» get«serviceName(remoteService)»();
		«ENDIF»
 	«ENDFOREACH»
}
«ENDFILE»

«ENDDEFINE»
