<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xi="http://www.w3.org/2001/XInclude"
	xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd" version="4.5">

	<title>The Model</title>
 
	<section>
		<title>Overview</title>
		<para>
			This chapter will explain the model that is essential for every MyAdmin based application.
		</para>
		
		<formalpara>
			<title>Basic model sample</title>
  
			<programlisting language="Java">
project Project1 {
	package org.example.project1 {
	}
}</programlisting>
		</formalpara>

		<para>
			This basic (and completely useless) model only consists of the model name <varname>Project1</varname> and an empty package. The model name is used when 
			referencing the model in MWE workflows. This model also defines an empty package <varname>org.example.project1</varname>, as this is 
			the topmost package it will automatically be used as root package path. So for this model all generated Java artifacts will be located somewhere under
			<emphasis>org.example.project1.*</emphasis>.
		</para>

		<section>
			<title>Syntax</title>
			<para>

				<itemizedlist>
					<title>Basic syntax rules</title>
					<listitem>
						<para>
							<emphasis>Model ID's</emphasis>
							Each model element has its own unique ID, e.g. the ID for an entity is it's name, for an attribute it's the name
							of the attribute, etc. Because nearly all elements of the model will later result in some sort of generated java
							source code, model identifiers should comply to the rules for
							<ulink url="http://docs.oracle.com/javase/specs/jls/se5.0/html/lexical.html#3.8">Java identifiers</ulink>, to avoid 
							compile time problems.
						</para>
					</listitem>
				</itemizedlist>

			</para>
		</section>
	</section>

	<xi:include href="SectionModelDatatypes.xml" />

	<section id="model_entities">
		<title>Entities</title>

		<formalpara>
			<title>Simple entity sample</title>
  
			<programlisting language="Java">
entity Country {
	datatype CountryName countryName
}</programlisting>
		</formalpara>

		<para>
			Entities basically consist of a name and a list of attributes, with each attribute having it's own type. The definition resembles a Java 
			class definition with the difference that the attributes type is preceded with the keyword <literal>datatype</literal> meaning that 
			this attribute should take its type information from the datatype <literal>CountryName</literal>. The resulting java class will look 
			something like this: 
		</para>
		
		<formalpara>
			<title>Generated code example</title>
  
			<programlisting language="Java">
@Entity
@Table(name = "country")
public class Country implements IBaseEntity {

		@Id
		@Column(name = "country_id")
		@GeneratedValue(strategy = TABLE, generator = "country_id_seq")
		@SequenceGenerator(name = "country_id_seq", sequenceName = "country_id_seq", allocationSize = 1)
		private long id;
		
		public long getId() {
			return id;
		}
		
		public void setId(long id) {
			this.id = id;
		}
		
		@javax.persistence.Column(name = "country_countryname")
		private String countryName;
		
		public String getCountryName() {
			return countryName;
		}
		
		public void setCountryName(String countryName) {
			this.countryName = countryName;
		}
}</programlisting>
		</formalpara>

		<para>
			If you only need an entity without a CRUD UI and without the overhead of defining datatypes you can use the keyword <literal>simpletype</literal> 
			followed by the needed type.
		</para>
		
		<formalpara>
			<title>Entity without datatypes</title>
  
			<programlisting language="Java">
entity Entity1 {
	simpletype String string1
	simpletype Integer integer1
}</programlisting>
		</formalpara>
		
		<formalpara>
			<title>Generated value object code example</title>
  
			<programlisting language="Java">
public class CountryVO extends BaseVO implements IBaseVO {

	private static final long serialVersionUID = 1L;

	private long id = IBaseVO.NEW_VO_ID;

	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public static final IAttributeDescriptor&lt;?&gt; FIELD_COUNTRYNAME = new AttributeDescriptor(
			"countryName", String.class, String.class);

	public static IAttributeDescriptor[] getFieldDescriptors() {
		return new IAttributeDescriptor[] { FIELD_COUNTRYNAME };
	}

	public Object get(String name) {

		if ("oid".equals(name)) {
			return getOid();
		}

		if ("id".equals(name)) {
			return getId();
		}

		if ("countryName".equals(name)) {
			return this.countryName;
		}

		throw new RuntimeException(
				"no such attribute '" + name + "'");

	}

	public void set(String name, Object value) {

		if ("countryName".equals(name)) {

			setCountryName((String) value);

			return;
		}

		throw new RuntimeException(
				"no such attribute '" + name + "'");

	}

	private String countryName;

	public String getCountryName() {
		return countryName;
	}

	public void setCountryName(String countryName) {
		this.countryName = countryName;
	}

	public CountryVO cloneVO() {
		CountryVO newVO = new CountryVO();
		newVO.countryName = this.countryName;
		return newVO;
	}

	public IAttributeDescriptor&lt;?&gt; getAttributeDescriptor(
			String name) {
		for (IAttributeDescriptor&lt;?&gt; attributeDescriptor : getFieldDescriptors()) {
			if (attributeDescriptor.getAttributeName().equals(name)) {
				return attributeDescriptor;
			}
		}
		throw new RuntimeException("unsupported attribute '" + name + "'");
	}

}</programlisting>
		</formalpara>
		
		<para>
		The value object contains the same fields as the generated entity plus an <literal>IAttributeDescriptor</literal> for each 
		attribute containing some type information about the attribute. The attributes descriptors constants can be used the create JPQL queries with
		the <literal>IBaseEntityService</literal> to gather data. Also the help to circumvent the lack of reflection in GWT, as well provide information
		of the types contained in collections which otherwise won't be available due to type erasure.
		GWTs lack of reflection is also the reason for the generic getter/setter methods which are heavily used by the generic CRUD UIs.
		</para>

		<para>
			The generated result will be the same as with datatype. The following simpletypes are available:
			
			<itemizedlist>
				<listitem>
					<para><literal>Long</literal></para>
				</listitem>
				<listitem>
					<para><literal>Integer</literal></para>
				</listitem>
				<listitem>
					<para><literal>BigDecimal</literal></para>
				</listitem>
				<listitem>
					<para><literal>String</literal></para>
				</listitem>
				<listitem>
					<para><literal>Boolean</literal></para>
				</listitem>
				<listitem>
					<para><literal>Reference</literal></para>
				</listitem>
			</itemizedlist>
		</para>
	</section>
	
	<section id="model_value_objects">
		<title>Value Objects</title>
		<para>For each entity a corresponding value object is generated. When working with data from the DB you will almost never 
		directly use the entities, because all data from the entity is copied to its corresponding value object directly after loading.</para>
	</section>
	
	<section id="model_enumerations">
		<title>Enumerations</title>
		<para>
			Enumerations are defined the exact the same way as in Java.
			
			<formalpara>
				<title>Enumeration example</title>
	  
				<programlisting language="Java">
enum COUNTRY_TRAFFIC_DIRECTION {
 	LEFT, RIGHT
}
				</programlisting>
			</formalpara>
		</para>
	</section>

	<xi:include href="SectionDictionaryModel.xml" />

	<xi:include href="SectionServiceModel.xml" />

</chapter>

