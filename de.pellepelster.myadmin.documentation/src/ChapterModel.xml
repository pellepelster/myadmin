<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xi="http://www.w3.org/2001/XInclude"
	xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd" version="4.5">

	<title>The Model</title>

	<section>
		<title>Overview</title>
		<para>
			This chapter will explain the model that is essential for every MyAdmin based application. Starting with a basic 
			model that will be extended step by step to show new features until it meets all requirements for the demo project.
		</para>
		
		<formalpara>
			<title>Basic model sample</title>
  
			<programlisting language="Java">
project Demo {
	package de.pellepelster.myadmin.demo {
	}
}
			</programlisting>
		</formalpara>

		<para>
			This basic (and completely useless) model only consists of the model name <varname>Demo</varname> and an empty package. The model name is typically 
			used when referencing the model in MWE Workflows. This model also defines an empty package <varname>de.pellepelster.myadmin.demo</varname>, as this is 
			the topmost package it will automatically be used as root package path. So for this model all generated Java artifacts will be located somewhere under
			<emphasis>de.pellepelster.myadmin.demo.*</emphasis>.
		</para>

		<section>
			<title>Syntax</title>
			<para>

				<itemizedlist>
					<title>Basic syntax rules</title>
					<listitem>
						<para>
							<emphasis>Model ID's</emphasis>
							Each model element has its own unique ID, e.g. the ID for an entity is it's name, for an attribute it's the name
							of the attribute, etc. Because nearly all elements of the model will later result in some sort of generated java
							source code, model identifiers should comply to the rules for
							<ulink url="http://docs.oracle.com/javase/specs/jls/se5.0/html/lexical.html#3.8">Java identifiers</ulink>, to avoid 
							compile time problems.
						</para>
					</listitem>
				</itemizedlist>

			</para>
		</section>
	</section>


	<xi:include href="SectionModelDatatypes.xml" />

	<section id="model_entities">
		<title>Entities</title>

		<formalpara>
			<title>Simple entity sample</title>
  
			<programlisting language="Java">
entity Country {
	datatype CountryName countryName
}
			</programlisting>
		</formalpara>

		<para>
			Entities basically consist of a name and a list of attributes, with each attribute having it's own type. The definition resembles a Java 
			class definition with the difference that the attributes type is preceded with the keyword <literal>datatype</literal> meaning that 
			this attribute should take its type information from the datatype <literal>CountryName</literal>. The resulting java class will look 
			something like this: 
		</para>
		
		<formalpara>
			<title>Generated code example</title>
  
			<programlisting language="Java">
@javax.persistence.Entity
@javax.persistence.Table(name = "country")
public class Country implements de.pellepelster.myadmin.db.IBaseEntity {

		@javax.persistence.Id
		@javax.persistence.Column(name = "country_id")
		@javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.TABLE, generator = "country_id_seq")
		@javax.persistence.SequenceGenerator(name = "country_id_seq", sequenceName = "country_id_seq", allocationSize = 1)
		private long id;
		
		public long getId() {
			return id;
		}
		
		public void setId(long id) {
			this.id = id;
		}
		
		@javax.persistence.Column(name = "country_countryname")
		private java.lang.String countryName;
		
		public java.lang.String getCountryName() {
			return countryName;
		}
		
		public void setCountryName(java.lang.String countryName) {
			this.countryName = countryName;
		}
}
			</programlisting>
		</formalpara>

		<para>
			If you only need an entity without a UI without the overhead of defining datatypes you can use the keyword <literal>simpletype</literal> 
			followed by the needed type
		</para>


		<formalpara>
			<title>Entity without datatypes</title>
  
			<programlisting language="Java">
entity Entity1 {
	simpletype String string1
	simpletype Integer integer1
}
			</programlisting>
		</formalpara>

		<para>
			The generated result will be the same as with datatype. The following simpletypes are available:
			
			<itemizedlist>
				<listitem>
					<para><literal>Long</literal></para>
				</listitem>
				<listitem>
					<para><literal>Integer</literal></para>
				</listitem>
				<listitem>
					<para><literal>BigDecimal</literal></para>
				</listitem>
				<listitem>
					<para><literal>String</literal></para>
				</listitem>
				<listitem>
					<para><literal>Boolean</literal></para>
				</listitem>
				<listitem>
					<para><literal>Reference</literal></para>
				</listitem>
			</itemizedlist>
		</para>
	</section>
	
	<section id="model_value_objects">
		<title>Value Objects</title>
		<para></para>
	</section>
	
	<section id="model_enumerations">
		<title>Enumerations</title>
		<para>
			Enumerations are defined the exact the same way as in Java.
			
			<formalpara>
				<title>Enumeration example</title>
	  
				<programlisting language="Java">
enum COUNTRY_TRAFFIC_DIRECTION {
 	LEFT, RIGHT
}
				</programlisting>
			</formalpara>
		</para>
	</section>

	<xi:include href="SectionDictionaryModel.xml" />

</chapter>

